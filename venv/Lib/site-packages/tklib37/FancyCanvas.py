from tkinter import *
from geom37 import *


class GraphicItem:
    def __init__(self, cnv):
        self.cnv = cnv
        self.cnv.graphics.append(self)
        self.uid = None


class Binding:
    def __init__(self, graphic, button):
        self.graphic = graphic
        self.button = button

        self.pressed = False
        self.origin = None
        self.initial = None

        self.graphic.cnv.bind(f"<Button-{self.button}>", self.on_click, add=True)
        self.graphic.cnv.bind(f"<ButtonRelease-{self.button}>", self.on_release, add=True)
        self.graphic.cnv.bind("<Motion>", self.on_motion, add=True)

    def _evt_to_scr(self, evt):
        return self.graphic.cnv.scr_to_dat(Dot(evt.x, evt.y))

    def on_click(self, evt):
        target = self._evt_to_scr(evt)
        if not self.pressed and target in self.graphic:
            self.pressed = True
            self.origin = self.get_origin()
            self.initial = target

    def on_release(self, evt):
        if self.pressed:
            self.pressed = False
            self.origin = None
            self.initial = None

    def on_motion(self, evt):
        target = self._evt_to_scr(evt)
        if self.pressed:
            self.upd_graphic(target)
            self.graphic.update()

    def get_origin(self):
        raise NotImplementedError

    def upd_graphic(self, target: Dot):
        raise NotImplementedError


class Translating(Binding):
    def __init__(self, graphic, button):
        super().__init__(graphic, button)

    def get_origin(self):
        return self.graphic.center

    def upd_graphic(self, target: Dot):
        self.graphic.center = self.origin + target - self.initial


class Scaling(Binding):
    def __init__(self, graphic, button):
        super().__init__(graphic, button)

    def get_origin(self):
        return self.graphic.center, self.graphic.delta

    def upd_graphic(self, target: Dot):
        center, delta = self.origin
        self.graphic.delta = delta * (target - center) / (self.initial - center)


class GRect(GraphicItem, Rect):
    def __init__(self, cnv, xi, yi, xf, yf):
        GraphicItem.__init__(self, cnv)
        Rect.__init__(self, xi, yi, xf, yf)

        Translating(graphic=self, button="1")
        Scaling(graphic=self, button="3")

    def show(self, **cfg):
        coords = self.cnv.dat_to_scr(self)
        if self.uid is None:
            self.uid = self.cnv.create_rectangle(*coords, **cfg)
        else:
            self.cnv.coords(self.uid, *coords)
            self.cnv.itemconfigure(self.uid, **cfg)

    def update(self):
        coords = self.cnv.dat_to_scr(self)
        if self.uid is None:
            self.uid = self.cnv.create_rectangle(*coords)
        else:
            self.cnv.coords(self.uid, *coords)


class FancyCanvas(Canvas):
    def __init__(self, root, data_rect=None, **cfg):
        super().__init__(root, **cfg)

        self.dimension_rect = Rect(0, 0, self.winfo_width(), self.winfo_height())
        self.data_rect = data_rect if data_rect else self.dimension_rect
        self.graphics = []

        self.bind("<Configure>", self.on_configure)

    def on_configure(self, e):
        self.dimension_rect.xf = self.winfo_width()
        self.dimension_rect.yf = self.winfo_height()

        for graphic in self.graphics:
            graphic.update()

    def scr_to_dat(self, obj):
        if isinstance(obj, Dot):
            return self.data_rect.from_unit(self.dimension_rect.to_unit(obj))
        elif isinstance(obj, Rect):
            return Rect(*self.scr_to_dat(obj.sw), *self.scr_to_dat(obj.ne))
        else:
            raise Exception

    def dat_to_scr(self, obj):
        if isinstance(obj, Dot):
            return self.dimension_rect.from_unit(self.data_rect.to_unit(obj))
        elif isinstance(obj, Rect):
            return Rect(*self.dat_to_scr(obj.sw), *self.dat_to_scr(obj.ne))
        else:
            raise Exception

    def g_rect(self, xi, yi, xf, yf, **cfg):
        graphic = GRect(cnv, xi, yi, xf, yf)
        graphic.show(**cfg)
        return graphic


if __name__ == '__main__':
    tk = Tk()

    cnv = FancyCanvas(tk, data_rect=Rect(0, 0, 100, 100), bg="lightgray", bd=0, highlightthickness=0)
    cnv.pack(side=TOP, fill=BOTH, expand=True)

    r1 = cnv.g_rect(0, 0, 33, 100, fill="blue")
    r2 = cnv.g_rect(33, 0, 67, 100, fill="white")
    r3 = cnv.g_rect(67, 0, 100, 100, fill="red")

    tk.mainloop()
