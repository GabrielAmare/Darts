from tkinter import *
from tklib37.KeyTable import KeyTable
from datetime import date

_DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]


def next_month(target):
    day = target.day
    month = target.month
    year = target.year

    month += 1

    if month == 13:
        month = 1
        year += 1

    if day > _DAYS_IN_MONTH[month]:
        day = _DAYS_IN_MONTH[month]

    return date(year=year, month=month, day=day)


def prev_month(target):
    day = target.day
    month = target.month
    year = target.year

    month -= 1

    if month == 0:
        month = 12
        year -= 1

    if day > _DAYS_IN_MONTH[month]:
        day = _DAYS_IN_MONTH[month]

    return date(year=year, month=month, day=day)


def is_day_in_month(day, month):
    assert 1 <= month <= 12
    return 1 <= day <= _DAYS_IN_MONTH[month]


def get_day(month, day):
    assert 1 <= month <= 12
    return (day - 1) % _DAYS_IN_MONTH[month] + 1


class CalendarHead(Frame):
    MONTH_TAGS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    MONTH_NAMES = ["janvier", "février", "mars", "avril", "mai", "juin",
                   "juillet", "août", "septembre", "octobre", "novembre", "décembre"]

    def __init__(self, root, on_prev_month, on_next_month, **cfg):
        super().__init__(root, **cfg)

        self.label = Label(self, padx=8, pady=4, font=("helvetica", 12), bd=1, relief=RAISED)

        self.prev_month = Button(self, text="▲", command=on_prev_month, padx=6, bd=1, font=("helvetica", 6))
        self.next_month = Button(self, text="▼", command=on_next_month, padx=6, bd=1, font=("helvetica", 6))

        self.label.grid(row=0, column=0, sticky=NSEW)

        self.prev_month.grid(row=0, column=1, sticky=NSEW)
        self.next_month.grid(row=0, column=2, sticky=NSEW)

        self.columnconfigure(0, weight=1)

    def set_target(self, target):
        print(target.month)
        self.label.config(text=f"{self.MONTH_NAMES[target.month - 1]} {target.year}")


class CalendarBody(KeyTable):
    WEEK_DAYS = ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"]

    def __init__(self, root, **cfg):
        super().__init__(root, **cfg)

        for index, week_day in enumerate(self.WEEK_DAYS):
            self.bind_col(key=week_day, col=index)

        for week_day in self.WEEK_DAYS:
            for week in range(6):
                self.set_widget(week, week_day, Button, text=".", bd=1)

    def set_target(self, target, callback):
        delta = target.replace(day=1).weekday()  # in [0, 7[

        def day_config(index, week):
            day = index + 7 * week - delta + 1
            month = target.month
            year = target.year
            ndays = _DAYS_IN_MONTH[target.month]

            if day < 1:
                month -= 1
                if month == 0:
                    month = 12
                    year -= 1
                day += _DAYS_IN_MONTH[month]
            elif day > ndays:
                month += 1
                if month == 13:
                    month = 1
                    year += 1
                day -= ndays
            else:
                month = target.month

            command = lambda: callback(date(year=year, month=month, day=day))

            bg = "bisque" if (year, month, day) == (target.year, target.month, target.day) else "lightgray"

            if month == target.month:
                return dict(text=day, command=command, state="normal", relief=RAISED, bd=1, bg=bg)
            else:
                return dict(text=day, command=command, state="normal", relief=SUNKEN, bd=1, bg=bg)

        for index, week_day in enumerate(self.WEEK_DAYS):
            for week in range(6):
                self.upd_widget(week, week_day, **day_config(index, week))


class Calendar(Frame):
    def __init__(self, root, target, **cfg):
        super().__init__(root, **cfg)

        self.head = CalendarHead(self, self.on_prev_month, self.on_next_month)
        self.body = CalendarBody(self)

        self.head.pack(side=TOP, fill=X)
        self.body.pack(side=TOP, fill=BOTH, expand=True)

        self.target = target

    def set_target(self, target):
        self.target = target

    @property
    def target(self):
        return self._target

    @target.setter
    def target(self, value):
        self._target = value
        self.head.set_target(value)
        self.body.set_target(value, self.set_target)

    def on_prev_month(self):
        self.target = prev_month(self.target)

    def on_next_month(self):
        self.target = next_month(self.target)


if __name__ == '__main__':
    win = Tk()

    Calendar(win, target=date.today()).pack(side=TOP, fill=BOTH, expand=True)

    win.mainloop()
